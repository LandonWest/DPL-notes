Alphabet Soup of the Web
_________________________

Interwebz

HTTP & DNS
__________

Hypertext transfer protocol. (think FedEX)
Domain Name System. computers that turn your domain name in to numbers and back again.
Domain Name. Your actual website's name.

http://www.yourcoolwebsite.com

http:// = the protocol
www = subdomain
yourcoolwebsite = domain name
.com = TLD top level domain

IP Address - the physical location of the domain address (ex. 221.186.184.68)
             more than one website can have the same ip address because the same
             machine hosts multiple sites.

HTML - CSS - JS
________________________
Hyper Text Markup Language
Cascading Style Sheets
JavaScript


RDBMS
______
Relational Database Management System (the database) - a place to put your data.

essentially looks like a spreadsheet

WebServer
_________
NGINX - a webserver program. There's a buch of others, too
Webserver- a program that will send files from your website server to someone's browser.


Learning Resources:
___________________
w3schools.com
teamtreehouse.com
codeschool.com
dochub.io
join a User Group in your city

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
A Bit About RAILS
________________________________________________
website vs. web application

website - is typically static, uses html/css and javascript. A brochure/billboard site.
web application - dynamic. does stuff like gmail, facebook, amazon.

Rails-
is a fullstack web application framework. It's also a ruby gem.
Sinatra is Not a fullstack web app framework, it's just a DSL.
Rails started in 2004 by DHH (David H. Hanson) for Basecamp

Full-Stack - from database to what people see on the site, and everything in-betwen.
Framework- tons of code already written to make you lazy

Rails lets you make applications quick, and easy. (people don't really say "ruby
  on rails" anymore. It's a Ruby developer who uses Rails)

Sites that use (at least some)Rails:
Github, YP, RailsRumble, Chow, Heroku, Funny of Die, Bleacher Report, Groupon, Hulu,
AirBnB, Twitter(switeched to Scala, uses very small portion of Rails now), LivingSocial,
SoundCloud, Shopify, SlideShare, Indiegogo, GitHub, BaseCamp,

Why do startups use Rails?
1. fast prototyping
2. quick deployment
3. easy iterations
4. less times saves money
5. open source is cheap

a Php dev and a Rails dev with the exact same skill level, the Rails dev will finish
2 weeks sooner, guaranteed.

the Ruby community is a lot stronger than many other languages. Rails devs tend to
 be more coffee shop, cutting edge, hipster vs. the php W.o.W. bedroom dwellers.
____________
NodeJs
    Express, Sails
Python
    Django, Grok
PHP
    Cake, Code Ignitor, Fuel, Symfony
___________
MVC
M- Model
V- View
C- Controller

Organization, put things where they belong, and they'll magically just work.

________
CoC
Convention over Configurization




________________________________________________________________________________
CREATING A NEW RAILS PROJECT:
________________________________________________________________________________

> rails new project_name   to create a new rails project
> cd project_name          cd into new project

Atom> create .ruby-version (2.1.2) and .ruby-gemset (project name)

> bundle                   make sure to cd out and back in after

> rails generate scaffold Task name:string description:string completed:boolean

> rake db:migrate

> rails s                  to start the rails server

> rake routes              shows you what pages are available to go to. you can
                           also do this in the browser when you type in a nonexistent
                           path (localhost:3000/nonexis)

Atom> Cmd T - search for route.rb
  add root 'tasks#index'  This routes your home page to 'tasks' instead of the rails placeholder.




> rm -rf directory_to_delete/     THIS WILL DELETE YOUR DIRECTORY PERMANENTLY!!!


________________________________________________________________________________

>rails destroy controller static_pages        Will delete something you didn't want to create...

from a new branch:

>rails generate controller static_pages home about contact_us
    this created static erb pages named home.erb, about.erb, and contact_us.erb in the app-views dir.


________________________________________________________________________________

RAILS and POSTGRESQL project:

MODEL (from MVC)

A model represents a database
A model is the thing you're modeling after some sort of real-world object.
All models are ruby classes.
model= Headset (singular)...
...makes-->  table column= Headsets (plural)



> rails new sandox -d postgresql         to create a new project with rails and postgresql

> rails generate model Animal

config directory, database.yml, put 'host: local host' under development

> rake db:create
> rake db:migrate




> rake db:seed



________________________________________________________________________________
PREVENTING SQL INJECTION IN RAILS:

Animal.where("LOWER(name) LIKE ?", "#{name}%")

> Animal.where("birthday > ? AND name = ?", 1.year.ago, "Fluffy")
  -or-
> Animal.where("birthday < ?", 1.year.ago).where(name: "Fluffy")
________________________________________________________________________________


SCOPE:

where you wanna run a specific query all the time and give that query a name.

animals = Animal.find_by_name('Fluffy')
animals = Animal.find(1)         *find by id number 1


________________________________________________________________________________
PRACTICE:

Create a Model called Student with first_name, last_name, and state.


> rails generate model Student first_name:string last_name:string state:string

> rake db:migrate

if you run into a problem you can do:
>rake db:drop         this will drop (delete) your database
>rake db:create       this will recreate your db from the migration files in rails

migrations are only used to change the structure of your tables in the db, like columns



Create a migration that adds favorite_color column to student

> rails generate migration AddFavoriteColorToStudent favorite_color:string

Add rows of students and all their column values
(in Rails console)
> Student.create(first_name: 'David', last_name: 'Nelson', state: 'Virginia', favorite_color: 'Blue')



query commands in rails c:
> Student.all
> Student.where(favorite_color: 'Blue')    *this method returns all results as an array
> Student.find_by_id(1)           *this method only returns the first result it finds


________________________________________________________________________________
MORE PRACTICE:
1. Create a new project

>rails new project -d postgresql

2. Create a Model called Students with first_name, last_name, and state.

> rails generate model Student first_name:string last_name:string state:string

2.5 Create a new database and migrate those changes to it:

> rake db:create
> rake db:migrate

3. Create a migration that adds a favorite_color column to your students table.

>rails generate migration AddFavoriteColorToStudent favorite_color:string

4. Create three students.
    Practice using rails console to find specific objects

>Student.create(first_name: 'Jason', last_name: 'Carter', state: 'Washington',
  favorite_color: 'Purple')

http://guides.rubyonrails.org/active_record_querying.html
________________________________________________________________________________
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@6/12

CONTROLLERS: are ruby classes, but they're not used like classes

Model-represents the db  (the model packs the order from the database)
Controler-          (the 'people person dude' from office space) asks the model
                     for information, then hands it off to the view
View-is the pages you see (the customers)

one model associated with one controller associated with several views

This whole mvc structure is one 'Resource' such as 'Animal Resource', therefore
  Animal Model, Animals Controller, Animals Views.
A resource is just a concept, its not an actual object

Then there is a collection of Resources
When you do >rails g scaffold Animals    -you're telling rails to create the
  Animals resource. But scaffold generates a lot of stuff you don't need.

'Routes' how the url's are specified for the views talking to a particular controller

ex.               Product Resource
Product Model,  Products Controller,  Products Views

/products (this is one of our routes)
/products/:id (this is a specific product. has a 'params id', this route is just like in sinatra)


________________________________
@6/12, 9:50 started new project
@6/12, 10:11 'rake db:seed'

@10:35 >rake routes

Controller#Action:
methods written inside a controller are called 'actions'

URI Pattern:
anything in ()s is optional. :id is a placeholder for whatever value is going to be there

Verb:
Get, Post, Delete(completely remove a resource), Patch(take a resource and update
  one or two attributes about it), Put(youre updating the entire resource)etc.

"REST" (Representational state transfer)
  'restful resource', 'restful route' etc.

Prefix:
a prefix to a method that will return a string.
for each prefix you get two methods you can use: _path (this is a relative path),
  _url (this is an absolute path) (ex. products_path)
  ex. edit_product_path(1)  1 is the value of :id
