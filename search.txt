SEARCH Function
________________________________________________________________________________

Search forms use a 'get' not a 'post' because your retrieving info from the db, and
  the results are generally and array of data.

Ex1

  Name: The Fuzzy Bunny

  where("LOWER(name) LIKE ?", "%fuzzy%")  -this technically works but is super inefficient.



*postgresql comes prebuilt with a full-text search engine built into it, mysql does not.

'full text search' scans an entire document if needed

'fuzzy search' "Did you mean fuzzy?" the search asks what it thinks you might have meant to search for.
  fuzzy searching is really complex and inefficient. Google does it, but has lots of custom stuff.


________________________________________________________________________________
SET UP SEARCH w/ PG SEARCH
________________________________________________________________________________

1. install gem 'pg_search'
      -bundle

2. setup multi-search by creating migration

  >rails g pg_search:migration:multisearch

  then open new migration file (nothing to change yet)

3. rake db:migrate

4. In the menu_item model add:

    include PgSearch
    multisearchable against: [:name, :description]

5. tell postgres we wanna be able to search on this model
      >rake pg_search:multisearch:rebuild[MenuItem]

6. in RAILS CONSOLE you can search for stuff:
    >PgSearch.multisearch('taco')

    >results = PgSearch.multisearch('taco')

    >results.first

    >result = results.first

    >result.searchable

7. add search to home page application_layout

    <%= form_tag('', method: :get) do %>
      <div class="input-group">
        <%= text_field_tag(:q, '', placeholder: 'Search...', class: 'form-control') %>
        <span class="input-group-btn">
          <%= submit_tag('Go!', class: 'btn btn-primary') %>
        </span>
      </div>
    <% end %>

8. add to routes:

    get '/search' => 'search_results#index'

9. rails g controller search_results

    add index action to controler
    add index view to search_views folder

    def index
      @results = PgSearch.multisearch(params[:q])
    end






10. SEARCHING THROUGH ASSOCIATIONS

    >rails g pg_search:migration:associated_against
    > rake db:migrate


    in menu item model:

      multisearchable against: [:name, :description], associated_against: { ingredients: [:name] }

    in rails c:

      [1] pry(main)> PgSearch::Multisearch.rebuild(MenuItem, Ingredient)





________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________


Lucene framework by Apache Group

3 big time search engines built off Lucene:
________________________________________________________________________________
-sphinx         -works great w/ mysql, for data heavy searches
-solar          -alot of online retailers like zappos use solar
-elastic search -has plugin capabilities to extend its functionality. It uses its own
                  persistent storage level, so you can use this in place of a postgresql db.
                  The api is all JSON wich can use Ruby hashes.


ELASTIC SEARCH
_______________
Most companies out there are using ElasticSearch

data from the db gets synced into the elastic search cloud.

to speed things up you have to add indexes to your data.

elastic search spins up it own server (port 93 by default) and creates 'shards' to break up the indexing evenly

STEPS:
___________________________________________________
*Need to have java installed for this search.  Java SE Development Kit 7 Download
*also do >brew update first
*also do >brew install elasticsearch (follow post-install console instructions to make it start on login)

1. gemfile
      gem 'elasticsearch-model'
        bundle
2. class MenuItem < ActiveRecord::Base
    include Elasticsearch::Model   <-------- add

    mapping do
      indexes :name, boost: 10
      indexes :description, type: 'string'            <--------add all this
    end

3. (this step is just to see if the search is working)

  rails c

  >MenuItem.import

  >MenuItem.search('taco')
  >response = MenuItem.search('taco')

  different things you can do:
    >response.took
    >response.size

    >response.results        (gets results form elastic search)
    >response.results.first
    >response.results.first.name

  >response.records.first     (not as efficient cause it queries elastic search AND sql db)

4. search_results controller

  class SearchResultsController < ApplicationController

  def index
    @results = MenuItem.search(params[:q])     <------ add
  end

  end

5. search_results index view:

  <h1>Search Results for <%= params[:q] %></h1>

  <p>Found <%= pluralize(@results.size, 'result') %></p>

  <% @results.results.each do |result| %>
    <ul>
      <li><%= link_to(result.name, menu_item_path(result.id)) %></li>
    </ul>

  <% end %>

6.
